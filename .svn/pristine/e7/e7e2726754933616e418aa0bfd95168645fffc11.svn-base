using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Sportsmen_Monitoring
{
    public partial class Form_Input : Form
    {
        public Form_Input()
        {
            InitializeComponent();
        }

        float resultat = 0;
        // заполняем какими-то данными 
        private void Form_Input_Load(object sender, EventArgs e)
        {
          /*  Model.Instance.Users.Add(new User { FirstName = "Иванов", Name = "Илья", Patronumic = "Васильевич" });
           
            Model.Instance.Sports.Add(new Sport{ Name = "Бег"});
            Model.Instance.Sports.Add(new Sport { Name = "Плавание" });
            sportsCB.Items.AddRange(Model.Instance.Sports.ToArray());

            Model.Instance.Scales.Add( new Scale{ Name = "сек"});
            Model.Instance.Scales.Add( new Scale{ Name = "м"});

            Model.Instance.Disciplines.Add(new Discipline { Name = "100 м", Sport = Model.Instance.Sports.Single(a => a.Name == "Бег") });
            Model.Instance.Disciplines.Add(new Discipline { Name = "200 м", Sport = Model.Instance.Sports.Single(a => a.Name == "Бег") });
            Model.Instance.Disciplines.Add(new Discipline { Name = "15 км", Sport = Model.Instance.Sports.Single(a => a.Name == "Бег") });

            Model.Instance.Disciplines.Add(new Discipline { Name = "50 м", Sport = Model.Instance.Sports.Single(a => a.Name == "Плавание"), Scales = Model.Instance.Scales.Single(a => a.Name == "сек") });
            Model.Instance.Disciplines.Add(new Discipline { Name = "300 м", Sport = Model.Instance.Sports.Single(a => a.Name == "Плавание"), Scales = Model.Instance.Scales.Single(a => a.Name == "м") });
            disciplinesCB.Items.Add(Model.Instance.Disciplines.ToArray());


            Model.Instance.Goals.Add(new Goal { Discipline = Model.Instance.Disciplines.Single(a => a.Name == "50 м"), Description = "проплыть за 10 секунд" });
            Model.Instance.Goals.Add(new Goal { Discipline = Model.Instance.Disciplines.Single(a => a.Name == "100 м"), Description = "пробежать за 30 секунд" });
          //  Model.Instance.Users_Goals.Add(new User_Goal { Goal = Model.Instance.Goals.Single(a => a.Description == "пробежать за 10 секунд") });

            Model.Instance.SaveBinaryFormat(); 
          //  Model.LoadFromBinaryFile(); */
         
            //  sportsCB.Items.AddRange(Model.Instance.Sports.ToArray());
            
            foreach (var a in Model.Instance.Sports.ToArray())
            {
                sportsCB.Items.Add(new ComboBoxItem { Text = a.Name, Id = a.ID });
            }

            //   disciplinesCB.Items.Add(Model.Instance.Disciplines.ToArray());

            foreach (var a in Model.Instance.Disciplines.ToArray())
            {
                disciplinesCB.Items.Add(new ComboBoxItem { Text = a.Name, Id = a.ID });
            }

        }

        // происходит при изменении в комбобоксе "Виды спорта"
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            groupBox_disciplines.Enabled = true;
            groupBox_Send.Enabled = false;
            disciplinesCB.Text = "";
            goalsCB.Text = "";
            newGoal_CB.Text = "";

         //   label_sport.Text = (sportsCB.SelectedItem as Sport).Name;
            label_sport.Text = (Model.Instance.Sports.Single(a => a.ID == (sportsCB.SelectedItem as ComboBoxItem).Id)).Name; 
            label_discipline.Text = "";

            var sportid = (sportsCB.SelectedItem as ComboBoxItem).Id;
            disciplinesCB.Items.Clear();
            var dis = Model.Instance.Disciplines.Where(q => q.Sport.ID == sportid).ToArray();
            foreach (var a in dis)
            {
                disciplinesCB.Items.Add(new ComboBoxItem { Id = a.ID, Text = a.Name });
            }

        }

        private void disciplinesCB_SelectedIndexChanged(object sender, EventArgs e)
        {
            //goalsCB.Text = "";
            groupBox_Send.Enabled = false;
            groupBox_goals.Enabled = true;
            button_newGoal.Enabled = true;
            // goalsCB.SelectedText = "";
            newGoal_CB.Text = "";

            if (disciplinesCB.Text == "") { goalsCB.Enabled = false; goalsCB.Text = ""; }
            else {goalsCB.Enabled = true;}

            // label_discipline.Text = (disciplinesCB.SelectedItem as Discipline).Name;
            label_discipline.Text = (Model.Instance.Disciplines.Single(a => a.ID == (disciplinesCB.SelectedItem as ComboBoxItem).Id)).Name;


            var disciplineid = (disciplinesCB.SelectedItem as ComboBoxItem).Id;

            newGoal_CB.Items.Clear();
            var goals = Model.Instance.Goals.Where(q => q.Discipline.ID == disciplineid).ToArray();
            foreach (var a in goals)
            {
                newGoal_CB.Items.Add(new ComboBoxItem { Text = a.Description, Id = a.ID});
            }
    


            goalsCB.Items.Clear();
            var user_goals = (Model.Instance.Users_Goals.Where(q => (q.User.ID == Model.Instance.CurrentUser.ID) && (q.Goal.Discipline.ID == disciplineid)).ToArray());
            foreach (var a in user_goals)
            {
                goalsCB.Items.Add(new ComboBoxItem { Id = a.ID, Text = a.Goal.Description});
            }
           // goalsCB.Items.AddRange(Model.Instance.Users_Goals.Where(q => (q.User.ID == Model.Instance.CurrentUser.ID) && (q.Goal.Discipline.ID == disciplineid)).ToArray());

        }

        private void goalsCB_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (goalsCB.Text == "") { button_newGoal.Enabled = true; }
            else { button_newGoal.Enabled = false; }

            groupBox_Send.Enabled = true;
            groupBox_AddGoal.Visible = false;

            var disciplineid = (disciplinesCB.SelectedItem as ComboBoxItem).Id;
          //  label_metric.Text = discipline.Scale.Name.ToString();
            label_metric.Text = Model.Instance.Disciplines.Single(q => q.ID == disciplineid).Scale.Name.ToString();       
         }

        private void button1_Click(object sender, EventArgs e)
        {
            if (  float.TryParse(textBox_result.Text, out resultat))
            {

                var user_goal = Model.Instance.Users_Goals.Single(a=> a.ID == (goalsCB.SelectedItem as ComboBoxItem).Id);
                Model.Instance.Users_Datas.Add(new User_Data(0, user_goal, resultat, dateTimePickerGoal.Value));
                Model.Instance.SaveBinaryFormat();
                label_send.Text = "Данные успешно отправлены!";
                label_send.Visible = true;
                label_send.ForeColor = Color.Green;
            }
            else
            {
                label_send.Text = "Проверьте правильность введённых данных";
                label_send.ForeColor = Color.Red;
                label_send.Visible = true;
            } 
        }

        private void button_GoGraph_Click(object sender, EventArgs e)
        {
            var form = new Graphic();
            Hide();
            form.ShowDialog();
            Close();
        }

        private void button_newGoal_Click(object sender, EventArgs e)
        {
            groupBox_AddGoal.Visible = true;
            label_sport.Text = (Model.Instance.Sports.Single(a => a.ID == (sportsCB.SelectedItem as ComboBoxItem).Id)).Name; 
            label_discipline.Text = (Model.Instance.Disciplines.Single(a => a.ID == (disciplinesCB.SelectedItem as ComboBoxItem).Id)).Name;
            var disciplineid = (disciplinesCB.SelectedItem as ComboBoxItem).Id;

            newGoal_CB.Items.Clear();
            var goals = Model.Instance.Goals.Where(q => q.Discipline.ID == disciplineid).ToArray();
            foreach (var a in goals)
            {
                newGoal_CB.Items.Add(new ComboBoxItem { Text = a.Description, Id = a.ID });
            }

        }

        private void button_AddGoal_Click(object sender, EventArgs e)
        {
            var goal= Model.Instance.Goals.Single(q => q.ID ==  (newGoal_CB.SelectedItem as ComboBoxItem).Id);
            var res = Model.Instance.Users_Goals.SingleOrDefault(q => (q.User.ID == Model.Instance.CurrentUser.ID) && (q.Goal.ID == (newGoal_CB.SelectedItem as ComboBoxItem).Id));

            if (res == null)
            {

                Model.Instance.Users_Goals.Add(new User_Goal(0, Model.Instance.CurrentUser, goal, dateTimePicker_newGoal.Value)); //    { User = Model.Instance.CurrentUser, DateStart = dateTimePicker_newGoal.Value, Goal = (newGoal_CB.SelectedItem as Goal) });
                Model.Instance.SaveBinaryFormat();
                MessageBox.Show("Данные успешно добавлены!", "Ура", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Такая цель у вас уже есть!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
         }

        private void newGoal_CB_SelectedIndexChanged(object sender, EventArgs e)
        {
            button_AddGoal.Enabled = true;
        }
    }
}
